# TODO: support arm64 target (c.f. the hellorust package)
TARGET = x86_64-pc-windows-gnu
PROFILE = @PROFILE@

LIBNAME = libprqlr.a
TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/$(LIBNAME)

PKG_LIBS = -L$(LIBDIR) -lprqlr \
	-lws2_32 \
	-ladvapi32 \
	-luserenv \
	-lbcrypt \
	-lntdll

CARGO_BUILD_ARGS = --lib \
	--profile="$(PROFILE)" \
	--manifest-path="$(CURDIR)/rust/Cargo.toml" \
	--target-dir="$(TARGET_DIR)" \
	--target=$(TARGET)

CARGOTMP = $(CURDIR)/.cargo
VENDOR_DIR = $(CURDIR)/rust/vendor
LIBGCC_MOCK_DIR = $(CURDIR)/libgcc_mock

# Rtools doesn't have the linker in the location that cargo expects, so we need
# to overwrite it via configuration.
CARGO_LINKER = x86_64-w64-mingw32.static.posix-gcc.exe

.PHONY: all
all: cleanup

$(SHLIB): $(STATLIB)

$(STATLIB): remove-prev
	# When the GNU toolchain is used (i.e. on CRAN), -lgcc_eh is specified for
	# building proc-macro2, but Rtools doesn't contain libgcc_eh. This isn't used
	# in actual, but we need this tweak to please the compiler.
	mkdir -p "$(LIBGCC_MOCK_DIR)" && touch "$(LIBGCC_MOCK_DIR)/libgcc_eh.a"

	if [ -f "$(CURDIR)/../tools/$(LIBNAME)" ]; then \
		mkdir -p "$(LIBDIR)" ; \
		mv "$(CURDIR)/../tools/$(LIBNAME)" "$(STATLIB)" ; \
		exit 0; \
	fi && \
	if [ -f "$(CURDIR)/rust/vendor.tar.xz" ]; then \
		mkdir -p "$(VENDOR_DIR)" && \
		$(TAR) --extract --xz --file "$(CURDIR)/rust/vendor.tar.xz" -C "$(VENDOR_DIR)" && \
		mkdir -p "$(CARGOTMP)" && \
		cp "$(CURDIR)/rust/vendor-config.toml" "$(CARGOTMP)/config.toml"; \
	fi && \
	if [ "$(NOT_CRAN)" != "true" ]; then \
		export CARGO_HOME="$(CARGOTMP)"; \
		export CARGO_BUILD_JOBS=2; \
	fi && \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
		export LIBRARY_PATH="$(LIBRARY_PATH);$(LIBGCC_MOCK_DIR)" && \
		cargo build $(CARGO_BUILD_ARGS)

.PHONY: remove-prev
# Remove previous build artifacts
remove-prev:
	rm -f "$(STATLIB)"

.PHONY: cleanup
# Clean up files that may cause warnings in R CMD check on CRAN just after the build
cleanup: $(SHLIB)
	rm -Rf "$(CARGOTMP)" "$(VENDOR_DIR)"
	if [ "$(NOT_CRAN)" != "true" ]; then \
		rm -Rf "$(STATLIB)" "$(LIBDIR)/build"; \
	fi

.PHONY: clean
clean:
	rm -Rf "$(SHLIB)" "$(STATLIB)" "$(OBJECTS)" "$(LIBGCC_MOCK_DIR)" "$(TARGET_DIR)"
